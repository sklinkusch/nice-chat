{"version":3,"sources":["images/avatar.png","images/avatar2.png","components/ContactCard.js","components/Sidebar.js","components/chat.js","components/MessageWindow.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Avatar","props","file","react_default","a","createElement","className","src","alt","Name","name","Description","desc","Dot","klasse","concat","color","ContactCard","key","item","ContactCard_Avatar","avatar","ContactCard_Name","ContactCard_Description","ContactCard_Dot","Sidebar","map","components_ContactCard","chat","left","message","ChatMessage","text","InputField","type","placeholder","ChatWindow","MessageWindow_ChatMessage","avatar2","MessageWindow_InputField","App","App_Row","components_Sidebar","components_MessageWindow","Component","Row","console","log","children","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c1956936.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.d7cd886c.png\";","module.exports = __webpack_public_path__ + \"static/media/avatar2.69f2b463.png\";","import React from \"react\";\nimport avatar from \"../images/avatar.png\";\nimport \"../styles/ContactCard.css\";\n\nconst ContactCard = props => (\n  <div className=\"contact-card flex-row\" key={props.item}>\n    <Avatar file={avatar} />\n    <div className=\"person-container\">\n      <Name name={props.name} />\n      <Description desc={props.desc} />\n    </div>\n    <Dot color=\"bluey-purple\" />\n  </div>\n);\n\nconst Avatar = props => {\n  if (props.file) {\n    return (\n      <div className=\"avatar\">\n        <img src={props.file} alt=\"avatar\" />\n      </div>\n    );\n  }\n  return <div className=\"avatar\" />;\n};\n\nconst Name = props => {\n  return <div className=\"personname\">{props.name}</div>;\n};\n\nconst Description = props => {\n  return <div className=\"description\">{props.desc}</div>;\n};\n\nconst Dot = props => {\n  const klasse = `dot ${props.color}`;\n  return <div className={klasse} />;\n};\n\nexport default ContactCard;\n","import React from \"react\";\nimport ContactCard from \"./ContactCard\";\nimport \"../styles/Sidebar.css\";\n\nconst Sidebar = props => (\n  <div className=\"sidebar fullHeight\">\n    {[1, 2, 3, 4, 5].map(item => (\n      <ContactCard name=\"Person Name\" desc=\"LMAO ROFL...IPSUM\" item={item} />\n    ))}\n  </div>\n);\n\nexport default Sidebar;\n","export default [\n  {\n    left: true,\n    message:\n      \"Do you know that: Nam dapibus nisl vitae elit fringilla rutrum. Aenean sollicitudin, erat a elementum rutrum, neque sem pretium metus\"\n  },\n  {\n    left: false,\n    message: \"LMAO ROFL..IPSUM\"\n  }\n];\n","import React from \"react\";\nimport chat from \"./chat\";\nimport avatar from \"../images/avatar.png\";\nimport avatar2 from \"../images/avatar2.png\";\nimport \"../styles/MessageWindow.css\";\n\n// Message window\n\nconst ChatWindow = props => (\n  <div className=\"chatwindow fullHeight\">\n    <ChatMessage text={chat[0].message} file={avatar} left={chat[0].left} />\n    <ChatMessage text={chat[1].message} file={avatar2} left={chat[1].left} />\n    <InputField />\n  </div>\n);\n\nconst ChatMessage = props => {\n  if (props.left) {\n    return (\n      <div className=\"message-container flex-start\">\n        <div className=\"avatar-ct\">\n          <img src={props.file} alt=\"avatar\" />\n        </div>\n        <div className=\"message-left\">\n          <div className=\"messageText\">{props.text}</div>\n        </div>\n      </div>\n    );\n  }\n  return (\n    <div className=\"message-container flex-end\">\n      <div className=\"message-right\">\n        <div className=\"messageText\">{props.text}</div>\n      </div>\n      <div className=\"avatar-ct\">\n        <img src={props.file} alt=\"avatar\" />\n      </div>\n    </div>\n  );\n};\n\nconst InputField = props => {\n  return (\n    <div className=\"inputfield\">\n      <input type=\"text\" placeholder=\"You can write words here!\" />\n    </div>\n  );\n};\n\nexport default ChatWindow;\n","import React, { Component } from \"react\";\nimport Sidebar from \"./Sidebar\";\nimport ChatWindow from \"./MessageWindow\";\nimport \"../styles/App.css\";\n\n// Main part\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Row>\n          <Sidebar />\n          <ChatWindow />\n        </Row>\n      </div>\n    );\n  }\n}\n\n// Parts\n\nconst Row = props => {\n  console.log(props);\n  return <div className=\"flex-row\">{props.children}</div>;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}